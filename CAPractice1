Alpha = 'zyxwvutsrqponmlkjihgfedcba'
alphacorrect = 'abcdefghijklmnopqrstuvwxyz'
alphalist = list(Alpha)
alphaCL = list(alphacorrect)
print(alphalist)
print(alphaCL)
Vmessage = "xuo jxuhu! jxyi yi qd unqcfbu ev q squiqh syfxuh. muhu oek qrbu je tusetu yj? y xefu ie! iudt cu q cuiiqwu rqsa myjx jxu iqcu evviuj!"
message = "Eat a dick, fucko."
def decoder(message, offset):
    newdecodedlist = []
    for letter in range(len(message)):
        lette = message[letter]
        if lette.isalpha():
            if lette in alphalist:
                newdecodedlist.append(alphalist[alphalist.index(lette) - offset])
        elif lette.isalpha() == False:
            newdecodedlist.append(message[message.index(lette)])
    return ''.join(newdecodedlist)
  
print(decoder(Vmessage, 10))

def coder(messag, offset):
    #^ ran into a little snafu here with the casing, and this was the fastest way to not have to rewrite code
    message = messag.lower()
    newdecodedlist = []
    AlphaDecoded = list(decoder(alphalist, offset))
    for letter in range(len(message)):
        lette = message[letter]
        if lette.isalpha():
            if lette in AlphaDecoded:
                newdecodedlist.append(AlphaDecoded[(AlphaDecoded.index(lette) + offset) % 26])
        elif lette.isalpha() == False:
            newdecodedlist.append(message[message.index(lette)])
    return ''.join(newdecodedlist)

print(decoder(coder(message, 10),10))


NuMessage = "vhfinmxkl atox kxgwxkxw tee hy maxlx hew vbiaxkl tl hulhexmx. px'ee atox mh kxteer lmxi ni hnk ztfx by px ptgm mh dxxi hnk fxlltzxl ltyx."

print(decoder(NuMessage, 7))
print(coder(decoder(NuMessage, 7),7))
